<template>
  <view class="container">
    <search @searchValue.user="doSearch"></search>
    <filterBar wx:if="{{list.length>0||skuval !==''}}" @currentType.user="currentType"></filterBar>
    <view wx:if="{{list.length>0}}">
      <!--矩阵商品列表模块-->
      <!--<shopGridList :purchasetype.sync="purchasetype" :list.sync="list"></shopGridList>-->
      <!--列表商品模块-->
      <shopLineList :purchasetype.sync="purchasetype" :list.sync="list"></shopLineList>
      <!--加载更多时动画-->
      <bottomLoadMore :show.sync="showLoading" message="正在加载"></bottomLoadMore>
    </view>
    <view wx:else>
    <!--暂无数据显示-->
      <placeholder :show.sync="is_empty" message="暂无发现数据"></placeholder>
    </view>

    <!--<view class="history {{show?'':'hidden'}}" wx:else>-->
      <!--<view class="doc">历史记录</view>-->
      <!--<view class="lable">-->
        <!--<view wx:for="{{keywordhisList}}" wx:key="item" @tap.stop="selHisKeyWord" data-id="{{item.id}}">-->
          <!--<view class="child {{item.sel=='1' ?'active':''}}">{{item.keyword}}</view>-->
        <!--</view>-->
      <!--</view>-->
      <!--<view class="btn_box">-->
        <!--<view class="button type_empity" @tap.stop="clearHis">清除历史记录</view>-->
      <!--</view>-->
    <!--</view>-->
  </view>
</template>

<script>
  import wepy from 'wepy';
  import api from '@/api/api';
  import tip from '@/utils/tip'

  import Searchs from '@/components/search'
  import FilterBar from "../components/filter_bar"
  // import ShopGridList from '@/components/shop_grid_list'
  import ShopLineList from '@/components/shop_line_list'
  import BottomLoadMore from "../components/common/bottomLoadMore"
  import Placeholder from "../components/common/placeholder"
  import FilterSlider from '@/components/filterSlider'
  import {SORT_DEFAULT, SORT_PRICE_ASC, SORT_PRICE_DESC, SORT_SALE_DESC} from "../utils/constant";
  export default class Search extends wepy.page {
    config = {
      navigationBarTitleText: '搜索',
    }
    components = {
      search: Searchs,
      filterBar: FilterBar,
      filterSlider: FilterSlider,
      // shopGridList: ShopGridList,
      shopLineList: ShopLineList,
      bottomLoadMore: BottomLoadMore,
      placeholder: Placeholder
    }
    data = {
      list: [],
      showLoading: false,
      purchasetype: 1,
      is_empty: false,
      is_filter:false,
      //当前页面
      currentPage: 1,
      //总页数
      pageTotal: 0,
      //每页显示几条
      pageSize:10,
      keyword: "",
      keywordhisList: [],
      cateCode: "",
      show: true,
      sort: -1,
      title: "",
      skuval: "",
      p_type:0,
      zoneId:"",
    }
    async getKeyWordHisList() {
      // let userSpecialInfo = wepy.getStorageSync(USER_SPECICAL_INFO) || {};
      // let openId = userSpecialInfo.openid;
      // const json = await api.searchKeywordList({
      //   query: {
      //     openId: openId
      //   }
      // });
      // if (json.data.code == 0) {
      //   this.keywordhisList = json.data.list;
      // }
      // this.$apply();
    }
    setTitle(title) {
      wepy.setNavigationBarTitle({
        title: title
      })
    }
    onLoad(option) {
      this.list = [];

      this.skuval = "";
      this.cateCode = option.cateCode;
      this.p_type=option.p_type;
      this.zoneId = option.zoneId;
      if (option.cateCode!=undefined||option.p_type!=undefined) { //分类进入
        this.$invoke('search', 'show', "1");
        this.show = false;
        this.doSearchGoods();
        this.title = "" + option.title;
        this.setTitle("" + option.title);
      } else { //搜索进入
        this.$invoke('search', 'show', "1");
        this.show = true;
        // this.getKeyWordHisList();
      }
    }
    computed = {}
    async doSearchGoods(keyword, loadMore) {
        let that = this,
        cateCode = that.cateCode || null,
        key = keyword || null,
        pageIndex = this.currentPage || 1,
        sizeIndex = this.pageSize || 10,
        loadMoreData = loadMore || false,
        sort = this.sort || null,
        json = await api.searchProduct(this.p_type,this.zoneId,cateCode, key, pageIndex, sizeIndex, sort);
      //   json = null;
      // if(keyword === undefined){//分类进入
      //   json = await api.categoryProductList(cateCode, pageIndex, sizeIndex);
      // }else{//搜索进入
      //   json = await api.searchProduct(cateCode, keyword, pageIndex, sizeIndex);
      // }
      if (json != null && json.data.stateCode == 0) {
        that.page_total = Math.ceil(json.data.totalSize/sizeIndex);
        if (json.data.products.length === 0) {
          //暂无数据
          that.is_empty = true;
        }else {
          if(loadMoreData){
            this.list.push(...json.data.products);
          }else {
            that.list = json.data.products;
          }
        }
      } else {
        tip.error(json.data.messagw+"");
      }
      that.showLoading = false;
      that.$apply();
      // if (keyword.length > 0) {
      //   let userSpecialInfo = wepy.getStorageSync(USER_SPECICAL_INFO) || {};
      //   let openId = userSpecialInfo.openid;
      //   const resultJson = await api.addSearchKeyword({
      //     query: {
      //       openId: openId,
      //       keyword: keyword
      //     }
      //   });
      // }
    }
    async clearUserKeywords() {
      // let userSpecialInfo = wepy.getStorageSync(USER_SPECICAL_INFO) || {};
      // let openId = userSpecialInfo.openid;
      // const json = await api.clearSearchKeyword({
      //   query: {
      //     openId: openId
      //   }
      // });
      // if (json.data.code == 0) {
      //   this.keywordhisList = [];
      // } else {
      //   tip.error(json.data.msg);
      // }
      // this.$apply();
    }
    methods = {
      doSearch(val) {
        this.list = [];
        this.is_empty = false;
        //tip.success("搜索：" + val);
        this.showLoading = true;
        this.keyword = val;
        this.currentPage = 1;
        this.doSearchGoods(val);
        this.$apply();
      },
      currentType(obj) {
        // tip.success("状态:" + obj);
        var name = obj.name;
        var type = obj.type;
        if (name == "zonghe") {
          this.sort = SORT_DEFAULT;
        } else if (name == "sale") {
          this.sort = SORT_SALE_DESC;
        } else if (name == "price") {
          if (type == "desc") {
            this.sort = SORT_PRICE_DESC;
          } else if (type == "asc") {
            this.sort = SORT_PRICE_ASC;
          }
        } else if (name == "sku") {
          this.skuval = type;
        }
        this.list = [];
        this.is_empty = false;
        this.showLoading = true;
        //this.$invoke('search', 'show', "0");
        this.show = false;
        this.doSearchGoods(this.keyword);
      },
      selHisKeyWord(e) {
        // console.log(e);
        var id = e.currentTarget.dataset.id;
        var hisKeyword = "";
        for (var i = 0; i < this.keywordhisList.length; i++) {
          this.keywordhisList[i].sel = 0;
          if (id == this.keywordhisList[i].id) {
            hisKeyword = this.keywordhisList[i].keyword;
            this.keywordhisList[i].sel = 1;
          }
        }
        if (hisKeyword.length > 0) {
          this.keyword = hisKeyword;
          this.doSearchGoods(hisKeyword);
        }
      },
      clearHis() {
        this.clearUserKeywords();
      },
      onShareAppMessage: function(res) {
        if (res.from === 'button') {
          // 来自页面内转发按钮
          // console.log(res.target)
        }
        return {
          title: this.navigationBarTitleText,
          path: '/pages/search?cateCode=' + this.cateCode + '&title=' + this.title,
          success: function(res) {
            // 转发成功
          },
          fail: function(res) {
            // 转发失败
          }
        }
      }
    }
    //加载更多
    onReachBottom() {
      let that = this;
      that.showLoading = true;
      // console.log(that.page_total + "===" + that.currentPage);
      //判断总页数是否大于翻页数
      if ((that.page_total) > that.currentPage) {
        //防止重复加载
        if (that.preventRepeatReuqest) {
          return true;
        }
        that.preventRepeatReuqest = true;
        that.currentPage++;
        that.doSearchGoods(that.keyword, true);
        that.preventRepeatReuqest = false;
      } else {
        that.showLoading = false;
      }
    };
  }
</script>

<style lang="less">
  .history {
    padding: 20px 27px;
  }
  .doc {
    color: #999;
    font-size: 26rpx;
  }
  .lable {
    margin-top: 20rpx;
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    margin-left: -20rpx;
    .child {
      background: #dedede;
      padding: 10rpx 20rpx;
      border-radius: 300rpx;
      margin-left: 20rpx;
      font-size: 26rpx;
      margin-top: 5rpx;
      color: #000;
    }
  }
  .btn_box {
    width: 377rpx;
    margin: 0 auto;
    padding-top: 88rpx;
    .button {
      color: #999;
    }
  }
  .active {
    border: 1px solid #f23737;
    color: #f23737;
  }
</style>
